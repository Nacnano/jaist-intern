populations = [
    138239548, 12482301, 85192033, 46192377, 64384110,
    2593204, 97201555, 18482029, 50283178, 5892100,
    73182992, 9382110, 33182027, 42001387, 7381290,
    61028190, 101283999, 56038210, 14301237, 80283712,
    3238102, 98103822, 76281309, 15728391, 62381928,
    24189208, 19204718, 89382100, 4123810, 11392008,
    23918203, 70203999, 66738291, 37281739, 16182102,
    29384010, 7483927, 52384200, 10203832, 38102837,
    87001394, 21384100, 60928372, 13382920, 8382000,
    74182000, 31928220, 40281930, 27384192, 90183827,
    1028392, 88129102, 25183920, 5182938, 6382183,
    22384192, 31382290, 12839182, 79384201, 35183901,
    44283827, 93182738, 3182938, 18384192, 69938128,
    95183738, 16382920, 46839109, 30182938, 13183920,
    8129283, 82183920, 77284028, 63382928, 11293837,
    21928281, 4928281, 39382010, 54183920, 70283920,
    2938102, 91283910, 26384109, 48382918, 36183928,
    20183938, 14182000, 6128301, 55839102, 34182938,
    32383920, 10182000, 17839120, 41283902, 43928382,
    96182384, 67283920, 28183938, 92384738, 59382938
]

GDPs = [
    23982300000000, 18894000000000, 13278000000000, 8765000000000, 7352000000000,
    6223000000000, 4987000000000, 4578000000000, 4235000000000, 3829000000000,
    3471000000000, 3124000000000, 2843000000000, 2635000000000, 2489000000000,
    2234000000000, 1992000000000, 1880000000000, 1764000000000, 1590000000000,
    1443000000000, 1327000000000, 1189000000000, 1042000000000, 938000000000,
    870000000000, 799000000000, 729000000000, 655000000000, 587000000000,
    519000000000, 475000000000, 439000000000, 402000000000, 374000000000,
    346000000000, 319000000000, 298000000000, 276000000000, 254000000000,
    239000000000, 225000000000, 211000000000, 198000000000, 185000000000,
    172000000000, 158000000000, 146000000000, 132000000000, 120000000000,
    109000000000, 99000000000, 90000000000, 82500000000, 74800000000,
    67200000000, 60500000000, 55000000000, 49500000000, 44800000000,
    40200000000, 36900000000, 34000000000, 31200000000, 28400000000,
    25900000000, 23500000000, 21300000000, 19200000000, 17400000000,
    15800000000, 14300000000, 12900000000, 11500000000, 10200000000,
    9080000000, 8110000000, 7260000000, 6520000000, 5870000000,
    5300000000, 4820000000, 4430000000, 4020000000, 3690000000,
    3360000000, 3050000000, 2740000000, 2480000000, 2250000000,
    2040000000, 1850000000, 1670000000, 1500000000, 1350000000,
    1200000000, 1060000000, 935000000, 822000000, 715000000
]

land_areas = [
    458920, 23500, 905320, 13200, 54000, 671000, 250300, 1850000, 324900, 12300,
    890000, 4750000, 60200, 340800, 215900, 15300000, 42000, 172800, 69000, 870500,
    399000, 1032000, 345600, 297000, 1789000, 58000, 34800, 923000, 149200, 101300,
    792000, 116000, 25000, 3800000, 510000, 675400, 29900, 182500, 75400, 844000,
    1610000, 435000, 9400, 64000, 28900, 1584000, 72000, 367800, 274000, 539000,
    9120000, 142000, 27800, 3275000, 38900, 1112000, 42900, 90500, 208400, 130500,
    78500, 294000, 395000, 242000, 65400, 989000, 17300, 165200, 43000, 146900,
    386000, 76000, 18100, 1356000, 26000, 144000, 290000, 349000, 718000, 108500,
    6400000, 420000, 8600, 175900, 301000, 37000, 296400, 189000, 11200, 1245000,
    479000, 940000, 1560000, 98000, 45000, 720000, 391000, 81000, 231000, 870000
]


def count_benford(numbers):
    """
    Count the occurrences of each leading digit in the list of numbers.
    
    Parameters:
    numbers (list): A list of integers.
    
    Returns:
    dict: A dictionary with leading digits as keys and their counts as values.
    """
    leading_digit_count = {}
    
    for number in numbers:
        # Convert number to string and get the first character
        leading_digit = str(number)[0]
        
        # Increment the count for this leading digit
        if leading_digit in leading_digit_count:
            leading_digit_count[leading_digit] += 1
        else:
            leading_digit_count[leading_digit] = 1
            
    return leading_digit_count

if __name__ == "__main__":
    result = count_benford(land_areas)
    print("Leading Digit Count:")
    for digit, count in sorted(result.items()):
        print(f"{digit}: {count}")
    
    # Example output format
    output = [{"leading_digit": digit, "count": count} for digit, count in sorted(result.items())]
    print("\nOutput in JSON format:")
    print(output)